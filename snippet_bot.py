import logging
import os
import re
import json
import hashlib
import math
from datetime import datetime
import random
import aiofiles
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from telegram.error import TelegramError

# Constants
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN or not re.match(r'^\d+:[A-Za-z0-9_-]+$', BOT_TOKEN):
    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN")
MAX_CODE_LENGTH = 4000
MAX_NAME_LENGTH = 100
ITEMS_PER_PAGE = 10
MEME_PROBABILITY = 0.2

if not os.path.exists('data'):
    os.makedirs('data')

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# File paths
SNIPPETS_FILE = 'data/shared_snippets.json'
PENDING_SNIPPETS_FILE = 'data/pending_snippets.json'
USERS_FILE = 'data/users.json'
ADMINS_FILE = 'data/admins.json'

# States
GET_NAME, GET_LANGUAGE, GET_TAGS, GET_CODE = range(4)

# Languages and categories
LANGUAGES = {
    'JavaScript': 'üü®',
    'PHP': 'üêò',
    'CSS': 'üé®',
    'HTML': 'üåê'
}

CATEGORIES = ['WordPress', 'Bitrix', '–û–±—â–µ–µ']

USER_LEVELS = {
    0: {'name': 'Junior', 'emoji': 'üå±', 'min_snippets': 0, 'min_uses': 0},
    1: {'name': 'Junior+', 'emoji': 'üåø', 'min_snippets': 3, 'min_uses': 20},
    2: {'name': 'Middle', 'emoji': 'üå≥', 'min_snippets': 10, 'min_uses': 100},
    3: {'name': 'Middle+', 'emoji': 'üå≤', 'min_snippets': 25, 'min_uses': 300},
    4: {'name': 'Senior', 'emoji': 'ü¶Ö', 'min_snippets': 50, 'min_uses': 1000},
    5: {'name': '–ö–æ–¥–æ–≤—ã–π –º–∞–≥', 'emoji': 'üßô‚Äç‚ôÇÔ∏è', 'min_snippets': 100, 'min_uses': 2500},
    6: {'name': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∫–æ–¥–∞', 'emoji': 'üèõÔ∏è', 'min_snippets': 200, 'min_uses': 5000},
    7: {'name': '–ö–æ–¥–æ–≤—ã–π —Ç–∏—Ç–∞–Ω', 'emoji': 'üí™‚ö°Ô∏è', 'min_snippets': 350, 'min_uses': 10000},
    8: {'name': '–õ–µ–≥–µ–Ω–¥–∞ –∫–æ–¥–∞', 'emoji': 'üåüüëë', 'min_snippets': 500, 'min_uses': 20000},
    9: {'name': '–ë–æ–≥ –∫–æ–¥–∞', 'emoji': '‚öúÔ∏èüî•', 'min_snippets': 1000, 'min_uses': 50000}
}

ACHIEVEMENTS = {
    'first_snippet': {'name': '–ü–µ—Ä–≤—ã–π —Å–Ω–∏–ø–ø–µ—Ç', 'emoji': 'üéâ', 'description': '–î–æ–±–∞–≤–∏–ª –ø–µ—Ä–≤—ã–π —Å–Ω–∏–ø–ø–µ—Ç'},
    'popular_author': {'name': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–≤—Ç–æ—Ä', 'emoji': '‚≠ê', 'description': '100+ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'code_master': {'name': '–ú–∞—Å—Ç–µ—Ä –∫–æ–¥–∞', 'emoji': 'üèÜ', 'description': '500+ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'multilang': {'name': '–ü–æ–ª–∏–≥–ª–æ—Ç', 'emoji': 'üåç', 'description': '–°–Ω–∏–ø–ø–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö'},
    'helpful': {'name': '–ü–æ–º–æ—â–Ω–∏–∫', 'emoji': 'ü§ù', 'description': '10+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –¥—Ä—É–≥–∏—Ö'},
    'active': {'name': '–ê–∫—Ç–∏–≤–∏—Å—Ç', 'emoji': 'üî•', 'description': '25+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'code_comedian': {'name': '–ö–æ–¥–æ–≤—ã–π –∫–æ–º–∏–∫', 'emoji': 'üòÇ', 'description': '–£–≤–∏–¥–µ–ª 10 —Ä–∞–∑–Ω—ã—Ö –º–µ–º–æ–≤ –æ—Ç –±–æ—Ç–∞'},
    'reliable_coder': {'name': '–ù–∞–¥—ë–∂–Ω—ã–π –∫–æ–¥–µ—Ä', 'emoji': '‚úÖ', 'description': '–°–Ω–∏–ø–ø–µ—Ç –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω'},
    'snippet_marathon': {'name': '–ú–∞—Ä–∞—Ñ–æ–Ω —Å–Ω–∏–ø–ø–µ—Ç–æ–≤', 'emoji': 'üèÉ', 'description': '–î–æ–±–∞–≤–∏–ª 5 —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å'},
    'code_sensei': {'name': '–ö–æ–¥–æ–≤—ã–π —Å–µ–Ω—Å–µ–π', 'emoji': 'ü•ã', 'description': '50+ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'tag_master': {'name': '–ú–∞—Å—Ç–µ—Ä —Ç–µ–≥–æ–≤', 'emoji': 'üè∑Ô∏è', 'description': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏'},
    'speed_coder': {'name': '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–¥–µ—Ä', 'emoji': '‚ö°', 'description': '–î–æ–±–∞–≤–∏–ª —Å–Ω–∏–ø–ø–µ—Ç –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 –º–∏–Ω—É—Ç—É'},
    'community_star': {'name': '–ó–≤–µ–∑–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 'emoji': 'üåü', 'description': '25+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏–ª–∏ —Å–Ω–∏–ø–ø–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'},
    'code_veteran': {'name': '–í–µ—Ç–µ—Ä–∞–Ω –∫–æ–¥–∞', 'emoji': 'üõ°Ô∏è', 'description': '100+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'bug_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–∞–≥–∞–º–∏', 'emoji': 'üïµÔ∏è', 'description': '10+ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'},
    'language_guru': {'name': '–ì—É—Ä—É —è–∑—ã–∫–∞', 'emoji': 'üìö', 'description': '10+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ'},
    'snippet_savant': {'name': '–°–∞–≤–∞–Ω—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤', 'emoji': 'üß†', 'description': '1000+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤—Å–µ—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'},
    'early_bird': {'name': '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞', 'emoji': 'üåÖ', 'description': '–î–æ–±–∞–≤–∏–ª —Å–Ω–∏–ø–ø–µ—Ç —Å 5:00 –¥–æ 7:00'},
    'night_owl': {'name': '–ù–æ—á–Ω–æ–π –∫–æ–¥–µ—Ä', 'emoji': 'ü¶á', 'description': '–î–æ–±–∞–≤–∏–ª —Å–Ω–∏–ø–ø–µ—Ç —Å 23:00 –¥–æ 3:00'},
    'code_crafter': {'name': '–ú–∞—Å—Ç–µ—Ä –∫–æ–¥–∞', 'emoji': 'üî®', 'description': '–°–Ω–∏–ø–ø–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤'},
    'loyal_coder': {'name': '–í–µ—Ä–Ω—ã–π –∫–æ–¥–µ—Ä', 'emoji': 'ü§ó', 'description': '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞ 30+ –¥–Ω–µ–π'},
    'gatekeeper': {'name': '–°—Ç—Ä–∞–∂ –∫–æ–¥–∞', 'emoji': 'üõë', 'description': '–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–ª 50+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'},
    'justice_bringer': {'name': '–í–µ—Ä—à–∏—Ç–µ–ª—å –ø—Ä–∞–≤–æ—Å—É–¥–∏—è', 'emoji': '‚öñÔ∏è', 'description': '–û—Ç–∫–ª–æ–Ω–∏–ª 25+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'},
    'admin_mentor': {'name': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –∞–¥–º–∏–Ω–æ–≤', 'emoji': 'üë®‚Äçüè´', 'description': '–î–æ–±–∞–≤–∏–ª 5+ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'},
    'swift_moderator': {'name': '–ë—ã—Å—Ç—Ä—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä', 'emoji': 'üèéÔ∏è', 'description': '–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–ª 10+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –∑–∞ —á–∞—Å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'},
    'code_inspector': {'name': '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –∫–æ–¥–∞', 'emoji': 'üîç', 'description': '–û–¥–æ–±—Ä–∏–ª 25+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –±–µ–∑ –∂–∞–ª–æ–± (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'}
}

CODE_MEMES = [
    "–¢–≤–æ–π –∫–æ–¥ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π, —á—Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞ CodePen! üòé",
    "–°–∫–æ–ø–∏—Ä–æ–≤–∞–ª –∫–æ–¥? –ù–µ –∑–∞–±—É–¥—å —É–±—Ä–∞—Ç—å console.log! üòâ",
    "PHP? –≠—Ç–æ –∂–µ —Å–ª–æ–Ω—è—á–∏–π –∫–æ–¥! üêò",
    "CSS: –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –Ω–æ —Å—Ç–∞–ª –∫–æ–¥–µ—Ä–æ–º! üé®",
    "JavaScript: –ø–æ—Ç–æ–º—É —á—Ç–æ var –≤—Å—ë –µ—â—ë –∂–∏–≤—ë—Ç –≤ –Ω–∞—à–∏—Ö —Å–µ—Ä–¥—Ü–∞—Ö! üü®",
    "HTML: —Ç–µ–≥ <br> ‚Äî –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å '—è —Å–¥–∞—é—Å—å'! üåê",
    "–ö–æ–¥ –±–µ–∑ –±–∞–≥–æ–≤? –≠—Ç–æ –º–∏—Ñ, –∫–∞–∫ –µ–¥–∏–Ω–æ—Ä–æ–≥! ü¶Ñ",
    "–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª —Å–Ω–∏–ø–ø–µ—Ç? –ü–æ—Ä–∞ –∑–∞ –∫–æ—Ñ–µ! ‚òï",
    "–°–Ω–∏–ø–ø–µ—Ç –≥–æ—Ç–æ–≤? –ü—Ä–æ–≤–µ—Ä—è–π, –Ω–µ —Å–ª–æ–º–∞–ª –ª–∏ —Ç—ã –ø—Ä–æ–¥–∞–∫—à–µ–Ω! üö®",
    "–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ù–µ —Ç—Ä–æ–≥–∞–π, –æ–Ω–æ —Å–∞–º–æ! üòÖ",
    "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞... –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ! ü§î",
    "CSS: 99% –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —ç—Ç–æ –±–æ—Ä—å–±–∞ —Å margin! üò§",
    "JavaScript: async/await –∏–ª–∏ –∫–∞–∫ —è –ø–µ—Ä–µ—Å—Ç–∞–ª –±–æ—è—Ç—å—Å—è –∏ –ø–æ–ª—é–±–∏–ª –ø—Ä–æ–º–∏—Å—ã! ü•≥",
    "PHP: echo '–Ø –≤—Å—ë –µ—â—ë –∑–¥–µ—Å—å!'; üêò",
    "–ö–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤? –≠—Ç–æ –∫–∞–∫ –ª–∞–±–∏—Ä–∏–Ω—Ç –±–µ–∑ –∫–∞—Ä—Ç—ã! üó∫Ô∏è",
    "HTML: <div> –≤–Ω—É—Ç—Ä–∏ <div> –≤–Ω—É—Ç—Ä–∏ <div>... –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! üåä",
    "–¢–≤–æ–π —Å–Ω–∏–ø–ø–µ—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à, —á—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª –¥–∞–∂–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω! üöÄ"
]

class AdminManager:
    def __init__(self):
        self.admins = []

    async def initialize(self):
        await self.load_admins()

    async def load_admins(self):
        if os.path.exists(ADMINS_FILE):
            try:
                async with aiofiles.open(ADMINS_FILE, 'r', encoding='utf-8') as f:
                    self.admins = json.loads(await f.read())
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–æ–≤: {e}")
                self.admins = []
        else:
            logger.warning(f"–§–∞–π–ª {ADMINS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
            self.admins = []

    async def save_admins(self):
        try:
            async with aiofiles.open(ADMINS_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.admins, indent=2, ensure_ascii=False))
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")

    def is_admin(self, user_id):
        return str(user_id) in self.admins

    async def add_admin(self, user_id):
        user_id = str(user_id)
        if user_id not in self.admins:
            self.admins.append(user_id)
            await self.save_admins()
            return True
        return False

class UserManager:
    def __init__(self):
        self.users = {}

    async def initialize(self):
        await self.load_users()

    async def load_users(self):
        if not os.path.exists(USERS_FILE):
            logger.info(f"–§–∞–π–ª {USERS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π")
            self.users = {}
            try:
                await self.save_users()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {USERS_FILE}: {e}", exc_info=True)
            return
        try:
            async with aiofiles.open(USERS_FILE, 'r', encoding='utf-8') as f:
                content = await f.read()
                if content.strip():
                    self.users = json.loads(content)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    logger.warning(f"–§–∞–π–ª {USERS_FILE} –ø—É—Å—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º")
                    self.users = {}
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            backup_file = f"{USERS_FILE}.bak"
            if os.path.exists(backup_file):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {backup_file}")
                try:
                    async with aiofiles.open(backup_file, 'r', encoding='utf-8') as f:
                        self.users = json.loads(await f.read())
                        await self.save_users()
                        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
                    self.users = {}
            else:
                self.users = {}

    async def save_users(self):
        try:
            os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
            if os.path.exists(USERS_FILE):
                import shutil
                shutil.copy(USERS_FILE, f"{USERS_FILE}.bak")
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {USERS_FILE}.bak")
            async with aiofiles.open(USERS_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.users, indent=2, ensure_ascii=False))
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except (IOError, OSError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
            raise

    def get_user(self, user_id):
        user_id = str(user_id)
        if user_id not in self.users:
            self.users[user_id] = {
                'favorites': [],
                'achievements': [],
                'level': 0,
                'total_snippets': 0,
                'total_uses': 0,
                'join_date': datetime.now().isoformat(),
                'seen_memes': [],
                'username': None,
                'last_submission_date': None,
                'submissions_today': 0
            }
        return self.users[user_id]

    async def update_user_stats(self, user_id, snippets_count, uses_count):
        user = self.get_user(user_id)
        user['total_snippets'] = snippets_count
        user['total_uses'] = uses_count
        
        old_level = user['level']
        for level, data in USER_LEVELS.items():
            if snippets_count >= data['min_snippets'] and uses_count >= data['min_uses']:
                user['level'] = level
        
        new_achievements = []
        
        if snippets_count >= 1 and 'first_snippet' not in user['achievements']:
            user['achievements'].append('first_snippet')
            new_achievements.append('first_snippet')
            
        if uses_count >= 100 and 'popular_author' not in user['achievements']:
            user['achievements'].append('popular_author')
            new_achievements.append('popular_author')
            
        if uses_count >= 500 and 'code_master' not in user['achievements']:
            user['achievements'].append('code_master')
            new_achievements.append('code_master')
            
        if snippets_count >= 25 and 'active' not in user['achievements']:
            user['achievements'].append('active')
            new_achievements.append('active')

        if snippets_count > 0 and 'multilang' not in user['achievements']:
            user_snippets = [data for data in storage.snippets.values() 
                            if data['author'] == user.get('username', '')]
            languages_used = set(snippet['language'] for snippet in user_snippets)
            if len(languages_used) >= len(LANGUAGES):
                user['achievements'].append('multilang')
                new_achievements.append('multilang')
        
        if 'helpful' not in user['achievements']:
            user_snippet_names = [name for name, data in storage.snippets.items() 
                                 if data['author'] == user.get('username', '')]
            total_favorites = sum(1 for other_user in self.users.values() 
                                 for fav in other_user['favorites'] 
                                 if fav in user_snippet_names)
            if total_favorites >= 10:
                user['achievements'].append('helpful')
                new_achievements.append('helpful')
        
        if user.get('submissions_today', 0) >= 5 and 'snippet_marathon' not in user['achievements']:
            user['achievements'].append('snippet_marathon')
            new_achievements.append('snippet_marathon')

        if snippets_count >= 50 and 'code_sensei' not in user['achievements']:
            user['achievements'].append('code_sensei')
            new_achievements.append('code_sensei')

        if snippets_count > 0 and 'tag_master' not in user['achievements']:
            user_snippets = [data for data in storage.snippets.values() 
                            if data['author'] == user.get('username', '')]
            tags_used = set(tag for snippet in user_snippets for tag in snippet.get('tags', []))
            if len(tags_used) >= len(CATEGORIES):
                user['achievements'].append('tag_master')
                new_achievements.append('tag_master')

        if 'community_star' not in user['achievements']:
            user_snippet_names = [name for name, data in storage.snippets.items() 
                                 if data['author'] == user.get('username', '')]
            favorite_users = set(user_id for user_id, other_user in self.users.items() 
                                for fav in other_user['favorites'] if fav in user_snippet_names)
            if len(favorite_users) >= 25:
                user['achievements'].append('community_star')
                new_achievements.append('community_star')

        if snippets_count >= 100 and 'code_veteran' not in user['achievements']:
            user['achievements'].append('code_veteran')
            new_achievements.append('code_veteran')

        if 'bug_hunter' not in user['achievements'] and admin_manager.is_admin(user_id):
            rejected_count = user.get('rejected_snippets', 0)
            if rejected_count >= 10:
                user['achievements'].append('bug_hunter')
                new_achievements.append('bug_hunter')

        if snippets_count > 0 and 'language_guru' not in user['achievements']:
            user_snippets = [data for data in storage.snippets.values() 
                            if data['author'] == user.get('username', '')]
            lang_counts = {}
            for snippet in user_snippets:
                lang = snippet['language']
                lang_counts[lang] = lang_counts.get(lang, 0) + 1
                if lang_counts[lang] >= 10:
                    user['achievements'].append('language_guru')
                    new_achievements.append('language_guru')
                    break

        if uses_count >= 1000 and 'snippet_savant' not in user['achievements']:
            user['achievements'].append('snippet_savant')
            new_achievements.append('snippet_savant')

        if 'loyal_coder' not in user['achievements']:
            join_date = datetime.fromisoformat(user['join_date'])
            days_active = (datetime.now() - join_date).days
            if days_active >= 30:
                user['achievements'].append('loyal_coder')
                new_achievements.append('loyal_coder')

        if 'gatekeeper' not in user['achievements'] and admin_manager.is_admin(user_id):
            moderated_count = user.get('approved_snippets', 0) + user.get('rejected_snippets', 0)
            if moderated_count >= 50:
                user['achievements'].append('gatekeeper')
                new_achievements.append('gatekeeper')

        if 'code_inspector' not in user['achievements'] and admin_manager.is_admin(user_id):
            approved_count = user.get('approved_snippets', 0)
            complaints = user.get('complaints', 0)
            if approved_count >= 25 and complaints == 0:
                user['achievements'].append('code_inspector')
                new_achievements.append('code_inspector')

        await self.save_users()
        return old_level != user['level'], new_achievements

    async def add_to_favorites(self, user_id, snippet_name):
        user = self.get_user(user_id)
        if snippet_name not in user['favorites']:
            user['favorites'].append(snippet_name)
            await self.save_users()
            return True
        return False

    async def remove_from_favorites(self, user_id, snippet_name):
        user = self.get_user(user_id)
        if snippet_name in user['favorites']:
            user['favorites'].remove(snippet_name)
            await self.save_users()
            return True
        return False

    def is_favorite(self, user_id, snippet_name):
        user = self.get_user(user_id)
        return snippet_name in user['favorites']

class SharedSnippetStorage:
    def __init__(self):
        self.snippets = {}
        self.pending_snippets = {}

    async def initialize(self):
        await self.load_snippets()
        await self.load_pending_snippets()

    async def load_snippets(self):
        if os.path.exists(SNIPPETS_FILE):
            try:
                async with aiofiles.open(SNIPPETS_FILE, 'r', encoding='utf-8') as f:
                    self.snippets = json.loads(await f.read())
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {e}")
                self.snippets = {}

    async def load_pending_snippets(self):
        if not os.path.exists(PENDING_SNIPPETS_FILE):
            logger.info(f"–§–∞–π–ª {PENDING_SNIPPETS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π")
            self.pending_snippets = {}
            try:
                await self.save_pending_snippets()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {PENDING_SNIPPETS_FILE}: {e}", exc_info=True)
            return
        try:
            async with aiofiles.open(PENDING_SNIPPETS_FILE, 'r', encoding='utf-8') as f:
                content = await f.read()
                if content.strip():
                    self.pending_snippets = json.loads(content)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.pending_snippets)} –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤")
                else:
                    logger.warning(f"–§–∞–π–ª {PENDING_SNIPPETS_FILE} –ø—É—Å—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º")
                    self.pending_snippets = {}
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {e}", exc_info=True)
            backup_file = f"{PENDING_SNIPPETS_FILE}.bak"
            if os.path.exists(backup_file):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {backup_file}")
                try:
                    async with aiofiles.open(backup_file, 'r', encoding='utf-8') as f:
                        self.pending_snippets = json.loads(await f.read())
                        await self.save_pending_snippets()
                        logger.info("–û–∂–∏–¥–∞—é—â–∏–µ —Å–Ω–∏–ø–ø–µ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {e}", exc_info=True)
                    self.pending_snippets = {}
            else:
                self.pending_snippets = {}

    async def save_pending_snippets(self):
        try:
            os.makedirs(os.path.dirname(PENDING_SNIPPETS_FILE), exist_ok=True)
            if os.path.exists(PENDING_SNIPPETS_FILE):
                import shutil
                shutil.copy(PENDING_SNIPPETS_FILE, f"{PENDING_SNIPPETS_FILE}.bak")
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {PENDING_SNIPPETS_FILE}.bak")
            async with aiofiles.open(PENDING_SNIPPETS_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.pending_snippets, indent=2, ensure_ascii=False))
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.pending_snippets)} –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤")
        except (IOError, OSError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {e}", exc_info=True)
            raise

    async def save_snippets(self):
        try:
            async with aiofiles.open(SNIPPETS_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.snippets, indent=2, ensure_ascii=False))
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {e}")

    async def add_snippet(self, name, code, language, author, tags=None):
        if name not in self.snippets:
            self.snippets[name] = {
                'code': code,
                'language': language,
                'author': author,
                'uses': 0,
                'tags': tags or [],
                'created_date': datetime.now().isoformat()
            }
            await self.save_snippets()
            return True
        return False

    async def add_pending_snippet(self, name, code, language, author, author_id, tags=None):
        if len(name) > MAX_NAME_LENGTH or len(code) > MAX_CODE_LENGTH:
            return False
        if name not in self.pending_snippets:
            self.pending_snippets[name] = {
                'code': code,
                'language': language,
                'author': author,
                'tags': tags or [],
                'created_date': datetime.now().isoformat(),
                'user_id': str(author_id)
            }
            await self.save_pending_snippets()
            return True
        return False

    async def approve_snippet(self, name):
        if name in self.pending_snippets:
            snippet = self.pending_snippets[name]
            success = await self.add_snippet(name, snippet['code'], snippet['language'], snippet['author'], snippet['tags'])
            if success:
                del self.pending_snippets[name]
                await self.save_pending_snippets()
                return True
        return False

    async def reject_snippet(self, name):
        if name in self.pending_snippets:
            del self.pending_snippets[name]
            await self.save_pending_snippets()
            return True
        return False

    async def get_snippet(self, name):
        if name in self.snippets:
            self.snippets[name]['uses'] += 1
            await self.save_snippets()
            return self.snippets[name]
        return None

    async def delete_snippet(self, name):
        if name in self.snippets:
            del self.snippets[name]
            await self.save_snippets()
            return True
        return False

    def search_snippets(self, query):
        return {name: data for name, data in self.snippets.items() if query.lower() in name.lower()}

    def filter_by_language(self, language):
        return {name: data for name, data in self.snippets.items() if data['language'] == language}

    def filter_by_tag(self, tag):
        return {name: data for name, data in self.snippets.items() if tag in data.get('tags', [])}

    def get_user_snippets_stats(self, author):
        user_snippets = [data for data in self.snippets.values() if data['author'] == author]
        total_snippets = len(user_snippets)
        total_uses = sum(snippet['uses'] for snippet in user_snippets)
        return total_snippets, total_uses

storage = SharedSnippetStorage()
user_manager = UserManager()
admin_manager = AdminManager()

def get_main_keyboard(is_admin=False):
    keyboard = [
        [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("üîç –ü–æ–∏—Å–∫"), KeyboardButton("üìã –í—Å–µ")],
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), KeyboardButton("üéØ –§–∏–ª—å—Ç—Ä—ã")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton("üìÇ FTP BackUp")]
    ]
    if is_admin:
        keyboard.insert(0, [KeyboardButton("üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_filter_keyboard():
    keyboard = []
    lang_row = []
    for lang, emoji in LANGUAGES.items():
        lang_row.append(KeyboardButton(f"{emoji} {lang}"))
    keyboard.append(lang_row[:2])
    keyboard.append(lang_row[2:])
    tag_row = []
    for tag in CATEGORIES:
        tag_row.append(KeyboardButton(f"üèóÔ∏è {tag}"))
    keyboard.append(tag_row)
    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–Ω–∏–ø–ø–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="admin_pending")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

def get_quick_actions_keyboard(snippet_name, user_id, is_author=False):
    keyboard = []
    row1 = [InlineKeyboardButton("üìú –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{hashlib.md5(snippet_name.encode()).hexdigest()[:16]}")]
    if user_manager.is_favorite(user_id, snippet_name):
        row1.append(InlineKeyboardButton("üíî –ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"unfav_{hashlib.md5(snippet_name.encode()).hexdigest()[:16]}"))
    else:
        row1.append(InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{hashlib.md5(snippet_name.encode()).hexdigest()[:16]}"))
    keyboard.append(row1)
    row2 = []
    if is_author:
        row2.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{hashlib.md5(snippet_name.encode()).hexdigest()[:16]}"))
    row2.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list"))
    keyboard.append(row2)
    return InlineKeyboardMarkup(keyboard)

def get_pending_snippets_keyboard(page=0):
    pending_snippets = storage.pending_snippets
    total_pages = math.ceil(len(pending_snippets) / ITEMS_PER_PAGE)
    if page >= total_pages:
        page = 0
    elif page < 0:
        page = total_pages - 1 if total_pages > 0 else 0
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_snippets = list(pending_snippets.keys())[start_idx:end_idx]
    keyboard = []
    for name in page_snippets:
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        data = pending_snippets[name]
        language_emoji = LANGUAGES.get(data['language'], 'üìú')
        btn_text = f"{language_emoji} {name}"
        if data.get('tags'):
            btn_text += f" üóÇÔ∏è{'/'.join(data['tags'])}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"review_{snippet_id}")])
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"page_pending_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"üìñ {page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"page_pending_{page+1}"))
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(keyboard), total_pages

def get_users_keyboard(page=0):
    users = list(user_manager.users.keys())
    total_pages = math.ceil(len(users) / ITEMS_PER_PAGE)
    if page >= total_pages:
        page = 0
    elif page < 0:
        page = total_pages - 1 if total_pages > 0 else 0
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_users = users[start_idx:end_idx]
    keyboard = []
    for user_id in page_users:
        user = user_manager.get_user(user_id)
        username = user.get('username', f"User {user_id}")
        btn_text = f"üë§ {username}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"view_user_{user_id}")])
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"page_users_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"üìñ {page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"page_users_{page+1}"))
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(keyboard), total_pages

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    if not admin_manager.is_admin(update.effective_user.id):
        await update_or_send_message(update, context, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=get_main_keyboard())
        return
    if not user_manager.users:
        await update_or_send_message(update, context, "üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=get_admin_keyboard())
        return
    context.user_data['navigation'] = context.user_data.get('navigation', {})
    context.user_data['navigation']['current_list'] = 'users'
    context.user_data['navigation']['current_page'] = page
    keyboard, total_pages = get_users_keyboard(page)
    await update_or_send_message(
        update,
        context,
        f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä. {page+1}/{total_pages}):",
        reply_markup=keyboard
    )

async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    if not admin_manager.is_admin(update.effective_user.id):
        await update.callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏!")
        return
    user_data = user_manager.get_user(user_id)
    if not user_data:
        await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    level_info = USER_LEVELS[user_data['level']]
    snippets_count, uses_count = storage.get_user_snippets_stats(user_data.get('username', ''))
    profile_text = (
        f"üë®‚Äçüé§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('username', f'User {user_id}')}\n\n"
        f"üìñ –£—Ä–æ–≤–µ–Ω—å: {level_info['emoji']} {level_info['name']}\n"
        f"üì© –°–Ω–∏–ø–ø–µ—Ç–æ–≤: {snippets_count}\n"
        f"üëç –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {uses_count}\n"
        f"‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {len(user_data['favorites'])}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['join_date'][:10]}\n\n"
    )
    if admin_manager.is_admin(user_id):
        profile_text += "üîß –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    if user_data.get('achievements'):
        profile_text += "üìñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in user_data['achievements']:
            ach_info = ACHIEVEMENTS[achievement]
            profile_text += f"{ach_info['emoji']} {ach_info['name']}: {ach_info['description']}\n"
    else:
        profile_text += "‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
    if user_data['level'] < 9:
        next_level = USER_LEVELS[user_data['level'] + 1]
        profile_text += f"\nüìà –î–æ —É—Ä–æ–≤–Ω—è {next_level['emoji']} {next_level['name']}:\n"
        profile_text += f"   –°–Ω–∏–ø–ø–µ—Ç—ã: {snippets_count}/{next_level['min_snippets']}\n"
        profile_text += f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {uses_count}/{next_level['min_uses']}\n"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="back_to_users")]
    ])
    await update_or_send_message(
        update,
        context,
        profile_text,
        reply_markup=keyboard
    )

def create_snippets_keyboard(snippets_dict, page=0, callback_prefix="show", extra_data="", show_language=True):
    snippet_names = list(snippets_dict.keys())
    total_pages = math.ceil(len(snippet_names) / ITEMS_PER_PAGE)
    if page >= total_pages:
        page = 0
    elif page < 0:
        page = total_pages - 1 if total_pages > 0 else 0
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_snippets = snippet_names[start_idx:end_idx]
    keyboard = []
    for name in page_snippets:
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        data = snippets_dict[name]
        language_emoji = LANGUAGES.get(data['language'], 'üìú')
        if show_language:
            btn_text = f"{language_emoji} {name}"
            if data.get('tags'):
                btn_text += f" üóÇÔ∏è{'/'.join(data['tags'])}"
            btn_text += f" (üëç {data['uses']})"
        else:
            btn_text = f"{name} (üëç {data['uses']})"
        callback_data = f"{callback_prefix}_{snippet_id}{extra_data}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=callback_data)])
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"page_{callback_prefix}_{page-1}{extra_data}"))
        nav_buttons.append(InlineKeyboardButton(f"üìñ {page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"page_{callback_prefix}_{page+1}{extra_data}"))
        keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(keyboard), total_pages

async def update_or_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text, reply_markup=None, parse_mode=None):
    chat_id = update.effective_chat.id
    last_message_id = context.user_data.get('last_message_id')

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if last_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_message_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {last_message_id}")
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        context.user_data['last_message_id'] = message.message_id
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message.message_id}")
        return message.message_id
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    user = user_manager.get_user(user_id)
    available_memes = [meme for meme in CODE_MEMES if meme not in user.get('seen_memes', [])]
    if not available_memes:
        user['seen_memes'] = []
        available_memes = CODE_MEMES
    meme = random.choice(available_memes)
    user['seen_memes'].append(meme)
    if len(user['seen_memes']) >= 10 and 'code_comedian' not in user['achievements']:
        user['achievements'].append('code_comedian')
        await update_or_send_message(
            update,
            context,
            f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\nüòÇ –ö–æ–¥–æ–≤—ã–π –∫–æ–º–µ–¥–∏–∞–Ω—Ç\n–£–≤–∏–¥–µ–ª 10 —Ä–∞–∑–Ω—ã—Ö –º–µ–º–æ–≤ –æ—Ç –±–æ—Ç–∞"
        )
    await user_manager.save_users()
    await update_or_send_message(
        update,
        context,
        meme
    )

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, snippet_name, snippet_data):
    language_emoji = LANGUAGES.get(snippet_data.get('language', ''), 'üìú')
    for admin_id in admin_manager.admins:
        try:
            tags = snippet_data.get('tags', [])
            tags_text = ', '.join(tags) if tags else '–ë–µ–∑ —Ç–µ–≥–æ–≤'
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üñã –ù–æ–≤—ã–π —Å–Ω–∏–ø–ø–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: '{snippet_name}'\n"
                     f"{language_emoji} –Ø–∑—ã–∫: {snippet_data.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                     f"üë®‚Äçüé§ –ê–≤—Ç–æ—Ä: {snippet_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                     f"üóÇÔ∏è –¢–µ–≥–∏: {tags_text}\n"
                     f"üìú –ö–æ–¥:\n```{snippet_data.get('language', '').lower()}\n{snippet_data.get('code', '')}\n```",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user = update.effective_user
    user_data = user_manager.get_user(user.id)
    level_info = USER_LEVELS[user_data['level']]
    is_admin = admin_manager.is_admin(user.id)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        f"üéñÔ∏è –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_info['emoji']} {level_info['name']}\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–≥–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {' '.join([f'{emoji} {lang}' for lang, emoji in LANGUAGES.items()])}"
    )
    if is_admin:
        text += "\n\nüîß –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–¥–º–∏–Ω-–º–µ–Ω—é' –∏–ª–∏ /pending –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    await update_or_send_message(update, context, text, reply_markup=get_main_keyboard(is_admin))

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_manager.is_admin(update.effective_user.id):
        await update_or_send_message(update, context, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=get_main_keyboard())
        return
    await update_or_send_message(
        update,
        context,
        "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_manager.is_admin(update.effective_user.id):
        await update_or_send_message(update, context, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=get_main_keyboard())
        return
    if len(context.args) != 1:
        await update_or_send_message(update, context, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin <user_id>", reply_markup=get_main_keyboard())
        return
    try:
        new_admin_id = context.args[0]
        user = user_manager.get_user(update.effective_user.id)
        if await admin_manager.add_admin(new_admin_id):
            user['added_admins'] = user.get('added_admins', 0) + 1
            if user['added_admins'] >= 5 and 'admin_mentor' not in user['achievements']:
                user['achievements'].append('admin_mentor')
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ACHIEVEMENTS['admin_mentor']['emoji']} {ACHIEVEMENTS['admin_mentor']['name']}\n"
                         f"{ACHIEVEMENTS['admin_mentor']['description']}"
                )
            await user_manager.save_users()
            await update_or_send_message(update, context, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!", reply_markup=get_main_keyboard(True))
        else:
            await update_or_send_message(update, context, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_main_keyboard(True))
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await update_or_send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_keyboard(True))

async def pending_snippets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_manager.is_admin(update.effective_user.id):
        await update_or_send_message(update, context, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=get_main_keyboard())
        return
    if not storage.pending_snippets:
        await update_or_send_message(update, context, "üñã –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞—è.", reply_markup=get_admin_keyboard())
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in storage.pending_snippets.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][f'pending_snippet_{snippet_id}'] = name
    keyboard, total_pages = get_pending_snippets_keyboard(page=0)
    await update_or_send_message(update, context, f"üñã –°–Ω–∏–ø–ø–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä. 1/{total_pages}):", reply_markup=keyboard)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_data = user_manager.get_user(user.id)
        user_data['username'] = user.username or user.full_name or f"User {user.id}"
        await user_manager.save_users()
        level_info = USER_LEVELS[user_data['level']]
        snippets_count, uses_count = storage.get_user_snippets_stats(user_data['username'])
        level_up, new_achievements = await user_manager.update_user_stats(user.id, snippets_count, uses_count)
        profile_text = (
            f"üë®‚Äçüé§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}\n\n"
            f"üìñ –£—Ä–æ–≤–µ–Ω—å: {level_info['emoji']} {level_info['name']}\n"
            f"üì© –°–Ω–∏–ø–ø–µ—Ç–æ–≤: {snippets_count}\n"
            f"üëç –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {uses_count}\n"
            f"‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {len(user_data['favorites'])}\n\n"
        )
        is_admin = admin_manager.is_admin(user.id)
        if is_admin:
            profile_text += "üîß –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
        if user_data.get('achievements'):
            profile_text += "üìñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement in user_data['achievements']:
                ach_info = ACHIEVEMENTS.get(achievement, {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'description': ''})
                profile_text += f"{ach_info['emoji']} {ach_info['name']}: {ach_info['description']}\n"
        else:
            profile_text += "‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
        if user_data['level'] < 9:
            next_level = USER_LEVELS[user_data['level'] + 1]
            profile_text += f"\nüìà –î–æ —É—Ä–æ–≤–Ω—è {next_level['emoji']} {next_level['name']}:\n"
            profile_text += f"   –°–Ω–∏–ø–ø–µ—Ç—ã: {snippets_count}/{next_level['min_snippets']}\n"
            profile_text += f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {uses_count}/{next_level['min_uses']}\n"
        await update_or_send_message(update, context, profile_text, reply_markup=get_main_keyboard(is_admin))
        if new_achievements:
            for achievement in new_achievements:
                ach_info = ACHIEVEMENTS.get(achievement, {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'description': ''})
                await update_or_send_message(
                    update,
                    context,
                    f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ach_info['emoji']} {ach_info['name']}\n{ach_info['description']}"
                )
        if level_up:
            await update_or_send_message(
                update,
                context,
                f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {level_info['emoji']} {level_info['name']}!"
            )
        if random.random() < MEME_PROBABILITY:
            await send_random_meme(update, context, user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_profile: {e}", exc_info=True)
        is_admin = admin_manager.is_admin(update.effective_user.id)
        await update_or_send_message(
            update,
            context,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard(is_admin)
        )

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update_or_send_message(
        update,
        context,
        text="üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤:",
        reply_markup=get_filter_keyboard()
    )

async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    user_data = user_manager.get_user(update.effective_user.id)
    favorites = user_data.get('favorites', [])
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if not favorites:
        await update_or_send_message(
            update,
            context,
            text="‚≠ê –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    favorite_snippets = {name: storage.snippets[name] for name in favorites if name in storage.snippets}
    if not favorite_snippets:
        await update_or_send_message(
            update,
            context,
            text="‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in favorite_snippets.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][snippet_id] = name
    context.user_data['navigation'] = context.user_data.get('navigation', {})
    context.user_data['navigation']['current_list'] = 'favorites'
    context.user_data['navigation']['current_page'] = page
    keyboard, total_pages = create_snippets_keyboard(favorite_snippets, page, "show", "_fav")
    text = f"üìñ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã (—Å—Ç—Ä. {page+1}/{total_pages}):"
    await update_or_send_message(update, context, text=text, reply_markup=keyboard)

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_snippets = len(storage.snippets)
    total_uses = sum(snippet.get('uses', 0) for snippet in storage.snippets.values())
    lang_stats = {}
    for snippet in storage.snippets.values():
        lang = snippet.get('language')
        if lang not in lang_stats:
            lang_stats[lang] = {'snippets': 0, 'uses': 0}
        lang_stats[lang]['snippets'] += 1
        lang_stats[lang]['uses'] += snippet.get('uses', 0)
    tag_stats = {}
    for snippet in storage.snippets.values():
        for tag in snippet.get('tags', []):
            if tag not in tag_stats:
                tag_stats[tag] = 0
            tag_stats[tag] += 1
    author_stats = {}
    for snippet in storage.snippets.values():
        author = snippet['author']
        if author not in author_stats:
            author_stats[author] = {'snippets': 0, 'uses': 0}
        author_stats[author]['snippets'] += 1
        author_stats[author]['uses'] += snippet.get('uses', 0)
    top_authors = sorted(author_stats.items(), key=lambda x: x[1]['uses'], reverse=True)[:3]
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {total_snippets}\n"
        f"üñçÔ∏è –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(storage.pending_snippets)}\n"
        f"üëç –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_uses}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(user_manager.users)}\n\n"
    )
    if lang_stats:
        stats_text += "üìà –ü–æ —è–∑—ã–∫–∞–º:\n"
        for lang, stats in lang_stats.items():
            emoji = LANGUAGES.get(lang, 'üìú')
            stats_text += f"{emoji} {lang}: {stats['snippets']} —à—Ç. ({stats['uses']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)\n"
        stats_text += "\n"
    if tag_stats:
        stats_text += "üóÇÔ∏è –ü–æ —Ç–µ–≥–∞–º:\n"
        for tag, count in tag_stats.items():
            stats_text += f"‚Ä¢ {tag}: {count} —à—Ç.\n"
        stats_text += "\n"
    if top_authors:
        stats_text += "üèÜ –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤:\n"
        for i, (author, stats) in enumerate(top_authors, 1):
            medals = ['ü•á', 'ü•à', 'ü•â']
            medal = medals[i-1] if i <= 3 else 'üèÖ'
            stats_text += f"{medal} {author}: {stats['snippets']} snippets ({stats['uses']} views)\n"
    is_admin = admin_manager.is_admin(update.effective_user.id)
    await update_or_send_message(update, context, stats_text, reply_markup=get_main_keyboard(is_admin))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚Ñπ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üì• –î–æ–±–∞–≤–∏—Ç—å - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–Ω–∏–ø–ø–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è)\n"
        "üîç –ü–æ–∏—Å–∫ - –ù–∞–π—Ç–∏ –∫–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "üìñ –í—Å–µ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–Ω–∏–ø–ø–µ—Ç—ã\n"
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–Ω–∏–ø–ø–µ—Ç\n"
        "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
        "üéØ –§–∏–ª—å—Ç—Ä—ã - –ü–æ–∏—Å–∫ –ø–æ —è–∑—ã–∫–∞–º –∏ —Ç–µ–≥–∞–º\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
    )
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if is_admin:
        help_text += (
            "\nüìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üîß –ö–Ω–æ–ø–∫–∞ '–ê–¥–º–∏–Ω-–º–µ–Ω—é' - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é\n"
            "/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "/addadmin <user_id> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        )
    help_text += (
        f"\nüìö –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {' '.join([f'{emoji} {lang}' for lang, emoji in LANGUAGES.items()])}\n"
        f"üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(CATEGORIES)}\n\n"
        "üèÜ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π:\n"
    )
    for level, info in USER_LEVELS.items():
        help_text += f"{info['emoji']} {info['name']} - {info['min_snippets']}+ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤, {info['min_uses']}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    await update_or_send_message(update, context, help_text, reply_markup=get_main_keyboard(is_admin))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    is_admin = admin_manager.is_admin(update.effective_user.id)
    await update_or_send_message(update, context, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=get_main_keyboard(is_admin))
    context.user_data.clear()
    return ConversationHandler.END

async def add_snippet_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    user_data = user_manager.get_user(user_id)
    today = datetime.now().date().isoformat()
    if 'last_submission_date' in user_data and user_data['last_submission_date'] == today:
        if user_data.get('submissions_today', 0) >= 5:
            is_admin = admin_manager.is_admin(update.effective_user.id)
            await update_or_send_message(
                update,
                context,
                text="‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (5)!",
                reply_markup=get_main_keyboard(is_admin)
            )
            return ConversationHandler.END
        user_data['submissions_today'] += 1
    else:
        user_data['last_submission_date'] = today
        user_data['submissions_today'] = 1
    await user_manager.save_users()
    
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    context.user_data['snippet_start_time'] = datetime.now()
    await update_or_send_message(
        update,
        context,
        "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return GET_NAME

async def get_snippet_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    if update.message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data['snippet_name'] = update.message.text
    lang_buttons = []
    for lang, emoji in LANGUAGES.items():
        lang_buttons.append(KeyboardButton(f"{emoji} {lang}"))
    keyboard = [lang_buttons[:2], lang_buttons[2:], [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
    await update_or_send_message(
        update,
        context,
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return GET_LANGUAGE

async def get_snippet_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    if update.message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    selected_language = None
    for lang, emoji in LANGUAGES.items():
        if update.message.text == f"{emoji} {lang}":
            selected_language = lang
            break
    if selected_language:
        context.user_data['language'] = selected_language
        tag_buttons = []
        for tag in CATEGORIES:
            tag_buttons.append(KeyboardButton(f"üóÇÔ∏è {tag}"))
        keyboard = [
            tag_buttons,
            [KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]
        ]
        await update_or_send_message(
            update,
            context,
            text="üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/—Ç–µ–≥ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return GET_TAGS
    else:
        lang_buttons = []
        for lang, emoji in LANGUAGES.items():
            lang_buttons.append(KeyboardButton(f"{emoji} {lang}"))
        keyboard = [lang_buttons[:2], lang_buttons[2:], [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
        await update_or_send_message(
            update,
            context,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return GET_LANGUAGE

async def get_snippet_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    if update.message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if update.message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['tags'] = []
    else:
        selected_tag = None
        for tag in CATEGORIES:
            if update.message.text == f"üóÇÔ∏è {tag}":
                selected_tag = tag
                break
        if selected_tag:
            context.user_data['tags'] = [selected_tag]
        else:
            context.user_data['tags'] = []
    await update_or_send_message(
        update,
        context,
        f"üíæ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–∞ '{context.user_data['snippet_name']}':\n"
        "(–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π '–ì–æ—Ç–æ–≤–æ')",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")],
            [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True)
    )
    return GET_CODE

async def get_snippet_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    if update.message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if update.message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        return await done_adding_code(update, context)
    if 'code' not in context.user_data:
        context.user_data['code'] = update.message.text
    else:
        context.user_data['code'] += "\n" + update.message.text
    if len(context.user_data['code']) > MAX_CODE_LENGTH:
        await update_or_send_message(
            update,
            context,
            text="‚ùå –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")],
                [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
        )
        return GET_CODE
    return GET_CODE

async def done_adding_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        snippet_name = context.user_data.get('snippet_name')
        code = context.user_data.get('code')
        language = context.user_data.get('language')
        tags = context.user_data.get('tags', [])
        author = update.effective_user.username or update.effective_user.full_name or f"User {update.effective_user.id}"
        author_id = update.effective_user.id
        start_time = context.user_data.get('snippet_start_time')

        if not all([snippet_name, code, language, author_id]):
            is_admin = admin_manager.is_admin(update.effective_user.id)
            await update_or_send_message(
                update,
                context,
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–∞!",
                reply_markup=get_main_keyboard(is_admin)
            )
            context.user_data.clear()
            return ConversationHandler.END

        if await storage.add_pending_snippet(snippet_name, code, language, author, author_id, tags):
            is_admin = admin_manager.is_admin(update.effective_user.id)
            await update_or_send_message(
                update,
                context,
                f"‚úÖ –°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
                f"{LANGUAGES.get(language, 'üìú')} –Ø–∑—ã–∫: {language}\n"
                f"üóÇÔ∏è –¢–µ–≥–∏: {', '.join(tags) if tags else '–ë–µ–∑ —Ç–µ–≥–æ–≤'}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {author}",
                reply_markup=get_main_keyboard(is_admin)
            )
            try:
                await notify_admins(context, snippet_name, storage.pending_snippets[snippet_name])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_admins: {e}", exc_info=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            user = user_manager.get_user(author_id)
            current_time = datetime.now()
            current_hour = current_time.hour
            new_achievements = []

            if start_time:
                elapsed_time = (current_time - start_time).total_seconds()
                if elapsed_time < 60 and 'speed_coder' not in user['achievements']:
                    user['achievements'].append('speed_coder')
                    new_achievements.append('speed_coder')
            if 5 <= current_hour < 7 and 'early_bird' not in user['achievements']:
                user['achievements'].append('early_bird')
                new_achievements.append('early_bird')
            if (23 <= current_hour or current_hour < 3) and 'night_owl' not in user['achievements']:
                user['achievements'].append('night_owl')
                new_achievements.append('night_owl')
            if len(code) > 1000 and 'code_crafter' not in user['achievements']:
                user['achievements'].append('code_crafter')
                new_achievements.append('code_crafter')

            if new_achievements:
                try:
                    await user_manager.save_users()
                    for achievement in new_achievements:
                        ach_info = ACHIEVEMENTS.get(achievement, {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'description': ''})
                        await update_or_send_message(
                            update,
                            context,
                            f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ach_info['emoji']} {ach_info['name']}\n{ach_info['description']}"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}", exc_info=True)

            if random.random() < MEME_PROBABILITY:
                try:
                    await send_random_meme(update, context, author_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ send_random_meme: {e}", exc_info=True)
        else:
            is_admin = admin_manager.is_admin(update.effective_user.id)
            await update_or_send_message(
                update,
                context,
                f"‚ùå –û—à–∏–±–∫–∞: –°–Ω–∏–ø–ø–µ—Ç —Å –∏–º–µ–Ω–µ–º '{snippet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª–∏–Ω—ã!",
                reply_markup=get_main_keyboard(is_admin)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ done_adding_code: {e}", exc_info=True)
        is_admin = admin_manager.is_admin(update.effective_user.id)
        await update_or_send_message(
            update,
            context,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–Ω–∏–ø–ø–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard(is_admin)
        )
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def review_snippet(update: Update, context: ContextTypes.DEFAULT_TYPE, snippet_id):
    if not admin_manager.is_admin(update.effective_user.id):
        await update.callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    snippet_name = context.user_data.get('snippets_map', {}).get(f'pending_snippet_{snippet_id}')
    if not snippet_name or snippet_name not in storage.pending_snippets:
        await update.callback_query.answer("‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    snippet = storage.pending_snippets[snippet_name]
    language_emoji = LANGUAGES.get(snippet['language'], 'üìú')
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{snippet_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{snippet_id}")
        ],
        [InlineKeyboardButton("üîç –ù–∞–∑–∞–¥", callback_data="back_to_pending")]
    ])
    await update_or_send_message(
        update,
        context,
        f"üìã –°–Ω–∏–ø–ø–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: '{snippet_name}'\n"
        f"{language_emoji} –Ø–∑—ã–∫: {snippet['language']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {snippet['author']}\n"
        f"üóÇÔ∏è –¢–µ–≥–∏: {', '.join(snippet['tags']) if snippet['tags'] else '–ë–µ–∑ —Ç–µ–≥–æ–≤'}\n"
        f"üìú –ö–æ–¥:\n```{snippet['language'].lower()}\n{snippet['code']}\n```",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def approve_snippet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    snippet_id = query.data.replace("approve_", "")
    snippet_name = context.user_data.get('snippets_map', {}).get(f'pending_snippet_{snippet_id}')
    if not snippet_name or not admin_manager.is_admin(update.effective_user.id):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    snippet = storage.pending_snippets.get(snippet_name)
    if not snippet:
        await query.answer("‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    user = user_manager.get_user(update.effective_user.id)
    user['approved_snippets'] = user.get('approved_snippets', 0) + 1
    if await storage.approve_snippet(snippet_name):
        logger.info(f"–°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.id}")
        user_id = snippet['user_id']
        user_author = user_manager.get_user(user_id)
        if 'reliable_coder' not in user_author['achievements']:
            user_author['achievements'].append('reliable_coder')
            await user_manager.save_users()
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ACHIEVEMENTS['reliable_coder']['emoji']} {ACHIEVEMENTS['reliable_coder']['name']}\n"
                     f"{ACHIEVEMENTS['reliable_coder']['description']}"
            )
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à —Å–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!"
        )
        await update_or_send_message(update, context, f"‚úÖ –°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ–¥–æ–±—Ä–µ–Ω!")
        snippets_count, uses_count = storage.get_user_snippets_stats(snippet['author'])
        level_up, new_achievements = await user_manager.update_user_stats(user_id, snippets_count, uses_count)
        if new_achievements:
            for achievement in new_achievements:
                ach_info = ACHIEVEMENTS[achievement]
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ach_info['emoji']} {ach_info['name']}\n{ach_info['description']}"
                )
        if level_up:
            user_data = user_manager.get_user(user_id)
            level_info = USER_LEVELS[user_data['level']]
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {level_info['emoji']} {level_info['name']}!"
            )
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è swift_moderator
        if 'last_moderation_time' not in user:
            user['last_moderation_time'] = datetime.now().isoformat()
            user['moderations_in_hour'] = 0
        last_time = datetime.fromisoformat(user['last_moderation_time'])
        current_time = datetime.now()
        if (current_time - last_time).total_seconds() <= 3600:
            user['moderations_in_hour'] = user.get('moderations_in_hour', 0) + 1
        else:
            user['moderations_in_hour'] = 1
            user['last_moderation_time'] = current_time.isoformat()
        if user['moderations_in_hour'] >= 10 and 'swift_moderator' not in user['achievements']:
            user['achievements'].append('swift_moderator')
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ACHIEVEMENTS['swift_moderator']['emoji']} {ACHIEVEMENTS['swift_moderator']['name']}\n"
                     f"{ACHIEVEMENTS['swift_moderator']['description']}"
            )
        await user_manager.save_users()
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏!")

async def reject_snippet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    snippet_id = query.data.replace("reject_", "")
    snippet_name = context.user_data.get('snippets_map', {}).get(f'pending_snippet_{snippet_id}')
    if not snippet_name or not admin_manager.is_admin(update.effective_user.id):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    snippet = storage.pending_snippets.get(snippet_name)
    if not snippet:         
        await query.answer("‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    context.user_data['reject_snippet_id'] = snippet_id
    user = user_manager.get_user(update.effective_user.id)
    user['rejected_snippets'] = user.get('rejected_snippets', 0) + 1
    await user_manager.save_users()
    await update_or_send_message(
        update,
        context,
        f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–Ω–∏–ø–ø–µ—Ç–∞ '{snippet_name}':",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_reject")]])
    )
    context.user_data['waiting_for_reject_reason'] = True

async def handle_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_for_reject_reason'):
        return
    try:
        if update.message:
            await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    reason = update.message.text
    snippet_id = context.user_data.get('reject_snippet_id')
    snippet_name = context.user_data.get('snippets_map', {}).get(f'pending_snippet_{snippet_id}')
    if not snippet_name or not storage.pending_snippets.get(snippet_name):
        is_admin = admin_manager.is_admin(update.effective_user.id)
        await update_or_send_message(update, context, "‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard(is_admin))
        context.user_data.pop('waiting_for_reject_reason', None)
        context.user_data.pop('reject_snippet_id', None)
        return
    snippet = storage.pending_snippets[snippet_name]
    user = user_manager.get_user(update.effective_user.id)
    if await storage.reject_snippet(snippet_name):
        logger.info(f"–°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        await context.bot.send_message(
            chat_id=snippet['user_id'],
            text=f"‚ùå –í–∞—à —Å–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        is_admin = admin_manager.is_admin(update.effective_user.id)
        await update_or_send_message(update, context, f"‚úÖ –°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}", reply_markup=get_main_keyboard(is_admin))
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è justice_bringer
        if len(reason) > 50:
            user['detailed_rejections'] = user.get('detailed_rejections', 0) + 1
            if user['detailed_rejections'] >= 25 and 'justice_bringer' not in user['achievements']:
                user['achievements'].append('justice_bringer')
                await user_manager.save_users()
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ACHIEVEMENTS['justice_bringer']['emoji']} {ACHIEVEMENTS['justice_bringer']['name']}\n"
                         f"{ACHIEVEMENTS['justice_bringer']['description']}"
                )
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è swift_moderator
        if 'last_moderation_time' not in user:
            user['last_moderation_time'] = datetime.now().isoformat()
            user['moderations_in_hour'] = 0
        last_time = datetime.fromisoformat(user['last_moderation_time'])
        current_time = datetime.now()
        if (current_time - last_time).total_seconds() <= 3600:
            user['moderations_in_hour'] = user.get('moderations_in_hour', 0) + 1
        else:
            user['moderations_in_hour'] = 1
            user['last_moderation_time'] = current_time.isoformat()
        if user['moderations_in_hour'] >= 10 and 'swift_moderator' not in user['achievements']:
            user['achievements'].append('swift_moderator')
            await user_manager.save_users()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n{ACHIEVEMENTS['swift_moderator']['emoji']} {ACHIEVEMENTS['swift_moderator']['name']}\n"
                     f"{ACHIEVEMENTS['swift_moderator']['description']}"
            )
        await user_manager.save_users()
    else:
        is_admin = admin_manager.is_admin(update.effective_user.id)
        await update_or_send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏!", reply_markup=get_main_keyboard(is_admin))
    context.user_data.pop('waiting_for_reject_reason', None)
    context.user_data.pop('reject_snippet_id', None)

async def search_snippets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if len(context.args) == 0:
        await update_or_send_message(
            update,
            context,
            "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /search –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–Ω–∏–ø–ø–µ—Ç–∞",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    query = ' '.join(context.args)
    results = storage.search_snippets(query)
    if not results:
        await update_or_send_message(
            update,
            context,
            f"‚ùå –°–Ω–∏–ø–ø–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in results.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][snippet_id] = name
    context.user_data['navigation'] = context.user_data.get('navigation', {})
    context.user_data['navigation']['current_list'] = 'search'
    context.user_data['navigation']['current_snippets'] = results
    context.user_data['navigation']['current_page'] = 0
    context.user_data['navigation']['search_query'] = query
    keyboard, total_pages = create_snippets_keyboard(results, 0, "show", "_search")
    await update_or_send_message(
        update,
        context,
        f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
        reply_markup=keyboard
    )
    if random.random() < MEME_PROBABILITY:
        await send_random_meme(update, context, update.effective_user.id)

async def show_all_snippets(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if not storage.snippets:
        await update_or_send_message(
            update,
            context,
            "üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–Ω–∏–ø–ø–µ—Ç!",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in storage.snippets.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][snippet_id] = name
    context.user_data['navigation'] = context.user_data.get('navigation', {})
    context.user_data['navigation']['current_list'] = 'all'
    context.user_data['navigation']['current_snippets'] = storage.snippets
    context.user_data['navigation']['current_page'] = page
    keyboard, total_pages = create_snippets_keyboard(storage.snippets, page, "show")
    text = f"üìñ –í—Å–µ —Å–Ω–∏–ø–ø–µ—Ç—ã (—Å—Ç—Ä. {page+1}/{total_pages}):"
    await update_or_send_message(update, context, text, reply_markup=keyboard)

async def show_snippet(update: Update, context: ContextTypes.DEFAULT_TYPE, snippet_id):
    snippets_map = context.user_data.get('snippets_map', {})
    snippet_name = snippets_map.get(snippet_id)
    if not snippet_name:
        await update.callback_query.answer("‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    snippet = await storage.get_snippet(snippet_name)
    if not snippet:
        await update.callback_query.answer("‚ùå –°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    language_emoji = LANGUAGES.get(snippet['language'], 'üìú')
    is_author = snippet['author'] == (update.effective_user.username or update.effective_user.full_name or f"User {update.effective_user.id}")
    snippet_text = (
        f"{language_emoji} **{snippet_name}**\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {snippet['author']}\n"
        f"üìÖ –î–∞—Ç–∞: {snippet.get('created_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}\n"
        f"üëç –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {snippet['uses']}\n"
    )
    if snippet.get('tags'):
        snippet_text += f"üóÇÔ∏è –¢–µ–≥–∏: {', '.join(snippet['tags'])}\n"
    snippet_text += f"\n\n```{snippet['language'].lower()}\n{snippet['code']}\n```"
    keyboard = get_quick_actions_keyboard(snippet_name, update.effective_user.id, is_author)
    await update_or_send_message(
        update,
        context,
        snippet_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def delete_snippet_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    author = update.effective_user.username or update.effective_user.full_name
    user_snippets = {name: data for name, data in storage.snippets.items() if data['author'] == author}
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if not user_snippets:
        await update_or_send_message(
            update,
            context,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in user_snippets.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][snippet_id] = name
    keyboard, total_pages = create_snippets_keyboard(user_snippets, 0, "delete")
    await update_or_send_message(
        update,
        context,
        f"üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∏–ø–ø–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {len(user_snippets)}):",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        await update.message.delete()
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if context.user_data.get('waiting_for_reject_reason'):
        return await handle_reject_reason(update, context)
    if text == "üì• –î–æ–±–∞–≤–∏—Ç—å":
        return await add_snippet_start(update, context)
    elif text == "üìã –í—Å–µ":
        return await show_all_snippets(update, context)
    elif text == "üîç –ü–æ–∏—Å–∫":
        await update_or_send_message(
            update,
            context,
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )
        context.user_data['waiting_for_search'] = True
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
        return await delete_snippet_start(update, context)
    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        return await show_favorites(update, context)
    elif text == "üéØ –§–∏–ª—å—Ç—Ä—ã":
        return await show_filters(update, context)
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        return await show_profile(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_statistics(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é" and is_admin:
        await admin_menu(update, context)
    elif text == "üìÇ FTP BackUp":
        try:
            await update_or_send_message(
                update,
                context,
                "üìÇ **FTP BackUp**\n"
                "üîó –°—Å—ã–ª–∫–∞: [https://github.com/H4ckMM3/FTP-Backup](https://github.com/H4ckMM3/FTP-Backup.git)\n"
                "üìù –û–ø–∏—Å–∞–Ω–∏–µ: FTP Backup ‚Äî –º–æ—â–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è Sublime Text, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤.",
                reply_markup=get_main_keyboard(is_admin),
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è FTP BackUp: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ FTP BackUp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    elif text == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update_or_send_message(update, context, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(is_admin))
        context.user_data.clear()
    elif context.user_data.get('waiting_for_search'):
        results = storage.search_snippets(text)
        context.user_data.pop('waiting_for_search', None)
        if not results:
            await update_or_send_message(
                update,
                context,
                f"‚ùå –°–Ω–∏–ø–ø–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_main_keyboard(is_admin)
            )
            return
        context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
        for name in results.keys():
            snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
            context.user_data['snippets_map'][snippet_id] = name
        context.user_data['navigation'] = context.user_data.get('navigation', {})
        context.user_data['navigation']['current_list'] = 'search'
        context.user_data['navigation']['current_snippets'] = results
        context.user_data['navigation']['current_page'] = 0
        context.user_data['navigation']['search_query'] = text
        keyboard, total_pages = create_snippets_keyboard(results, 0, "show", "_search")
        await update_or_send_message(
            update,
            context,
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}':",
            reply_markup=keyboard
        )
    elif text.startswith("üü® JavaScript"):
        filtered = storage.filter_by_language("JavaScript")
        await show_filtered_results(update, context, filtered, "JavaScript")
    elif text.startswith("üêò PHP"):
        filtered = storage.filter_by_language("PHP")
        await show_filtered_results(update, context, filtered, "PHP")
    elif text.startswith("üé® CSS"):
        filtered = storage.filter_by_language("CSS")
        await show_filtered_results(update, context, filtered, "CSS")
    elif text.startswith("üåê HTML"):
        filtered = storage.filter_by_language("HTML")
        await show_filtered_results(update, context, filtered, "HTML")
    elif text.startswith("üèóÔ∏è WordPress"):
        filtered = storage.filter_by_tag("WordPress")
        await show_filtered_results(update, context, filtered, "—Ç–µ–≥—É WordPress")
    elif text.startswith("üèóÔ∏è Bitrix"):
        filtered = storage.filter_by_tag("Bitrix")
        await show_filtered_results(update, context, filtered, "—Ç–µ–≥—É Bitrix")
    elif text.startswith("üèóÔ∏è –û–±—â–µ–µ"):
        filtered = storage.filter_by_tag("–û–±—â–µ–µ")
        await show_filtered_results(update, context, filtered, "—Ç–µ–≥—É –û–±—â–µ–µ")
    else:
        await update_or_send_message(
            update,
            context,
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard(is_admin)
        )

async def show_filtered_results(update: Update, context: ContextTypes.DEFAULT_TYPE, filtered_snippets, filter_name):
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if not filtered_snippets:
        await update_or_send_message(
            update,
            context,
            f"‚ùå –°–Ω–∏–ø–ø–µ—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É {filter_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    context.user_data['snippets_map'] = context.user_data.get('snippets_map', {})
    for name in filtered_snippets.keys():
        snippet_id = hashlib.md5(name.encode()).hexdigest()[:16]
        context.user_data['snippets_map'][snippet_id] = name
    context.user_data['navigation'] = context.user_data.get('navigation', {})
    context.user_data['navigation']['current_list'] = 'filtered'
    context.user_data['navigation']['current_snippets'] = filtered_snippets
    context.user_data['navigation']['current_page'] = 0
    context.user_data['navigation']['filter_name'] = filter_name
    keyboard, total_pages = create_snippets_keyboard(filtered_snippets, 0, "show", "_filtered")
    await update_or_send_message(
        update,
        context,
        f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ {filter_name}:",
        reply_markup=keyboard
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data: {data}")
    is_admin = admin_manager.is_admin(update.effective_user.id)
    if data.startswith("show_"):
        snippet_id = data.replace("show_", "").replace("_search", "").replace("_fav", "").replace("_filtered", "")
        await show_snippet(update, context, snippet_id)
    elif data.startswith("copy_"):
        snippet_id = data.replace("copy_", "")
        snippet_name = context.user_data.get('snippets_map', {}).get(snippet_id)
        if snippet_name and snippet_name in storage.snippets:
            snippet = storage.snippets[snippet_name]
            await query.answer("üìñ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"```{snippet['language'].lower()}\n{snippet['code']}\n```",
                parse_mode='Markdown'
            )
            if random.random() < 0.3:
                await send_random_meme(update, context, query.from_user.id)
    elif data.startswith("fav_"):
        snippet_id = data.replace("fav_", "")
        snippet_name = context.user_data.get('snippets_map', {}).get(snippet_id)
        if snippet_name:
            if await user_manager.add_to_favorites(query.from_user.id, snippet_name):
                await query.answer("‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                snippet = storage.snippets.get(snippet_name)
                if snippet:
                    is_author = snippet['author'] == (query.from_user.username or query.from_user.full_name)
                    keyboard = get_quick_actions_keyboard(snippet_name, query.from_user.id, is_author)
                    await update_or_send_message(update, context, query.message.text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await query.answer("‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
    elif data.startswith("unfav_"):
        snippet_id = data.replace("unfav_", "")
        snippet_name = context.user_data.get('snippets_map', {}).get(snippet_id)
        if snippet_name:
            if await user_manager.remove_from_favorites(query.from_user.id, snippet_name):
                await query.answer("üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
                snippet = storage.snippets.get(snippet_name)
                if snippet:
                    is_author = snippet['author'] == (query.from_user.username or query.from_user.full_name)
                    keyboard = get_quick_actions_keyboard(snippet_name, query.from_user.id, is_author)
                    await update_or_send_message(update, context, query.message.text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await query.answer("‚ö†Ô∏è –ù–µ –±—ã–ª–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
    elif data.startswith("delete_"):
        snippet_id = data.replace("delete_", "")
        snippet_name = context.user_data.get('snippets_map', {}).get(snippet_id)
        if snippet_name:
            snippet = storage.snippets.get(snippet_name)
            if snippet and snippet['author'] == (query.from_user.username or query.from_user.full_name):
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{snippet_id}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
                    ]
                ])
                await update_or_send_message(
                    update,
                    context,
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{snippet_name}'?\n"
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=keyboard
                )
            else:
                await query.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–Ω–∏–ø–ø–µ—Ç—ã!")
    elif data.startswith("confirm_delete_"):
        snippet_id = data.replace("confirm_delete_", "")
        snippet_name = context.user_data.get('snippets_map', {}).get(snippet_id)
        if snippet_name:
            if await storage.delete_snippet(snippet_name):
                logger.info(f"–°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
                for user_id, user_data in user_manager.users.items():
                    if snippet_name in user_data['favorites']:
                        user_data['favorites'].remove(snippet_name)
                await user_manager.save_users()
                await update_or_send_message(update, context, f"‚úÖ –°–Ω–∏–ø–ø–µ—Ç '{snippet_name}' —É–¥–∞–ª—ë–Ω!")
                context.user_data['snippets_map'].pop(snippet_id, None)
                if random.random() < 0.3:
                    await send_random_meme(update, context, query.from_user.id)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
    elif data == "cancel_delete":
        await update_or_send_message(update, context, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    elif data == "back_to_list":
        navigation = context.user_data.get('navigation', {})
        current_list = navigation.get('current_list')
        page = navigation.get('current_page', 0)
        if current_list == 'all':
            await show_all_snippets(update, context, page)
        elif current_list == 'favorites':
            await show_favorites(update, context, page)
        elif current_list == 'search':
            search_query = navigation.get('search_query', '')
            results = navigation.get('current_snippets', {})
            keyboard, total_pages = create_snippets_keyboard(results, page, "show", "_search")
            await update_or_send_message(
                update,
                context,
                f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' (—Å—Ç—Ä. {page+1}/{total_pages}):",
                reply_markup=keyboard
            )
        elif current_list == 'filtered':
            filter_name = navigation.get('filter_name', '—Ñ–∏–ª—å—Ç—Ä—É')
            results = navigation.get('current_snippets', {})
            keyboard, total_pages = create_snippets_keyboard(results, page, "show", "_filtered")
            await update_or_send_message(
                update,
                context,
                f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ {filter_name} (—Å—Ç—Ä. {page+1}/{total_pages}):",
                reply_markup=keyboard
            )
        else:
            await show_all_snippets(update, context, 0)
    elif data.startswith("page_"):
        parts = data.split("_")
        if len(parts) >= 3:
            action = parts[1]
            page = int(parts[2])
            navigation = context.user_data.get('navigation', {})
            results = navigation.get('current_snippets', {})
            if not results:
                await update_or_send_message(update, context, "‚ùå –°–Ω–∏–ø–ø–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            if "_fav" in data or navigation.get('current_list') == 'favorites':
                await show_favorites(update, context, page)
            elif "_search" in data or navigation.get('current_list') == 'search':
                search_query = navigation.get('search_query', '')
                navigation['current_page'] = page
                keyboard, total_pages = create_snippets_keyboard(results, page, "show", "_search")
                await update_or_send_message(
                    update,
                    context,
                    f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' (—Å—Ç—Ä. {page+1}/{total_pages}):",
                    reply_markup=keyboard
                )
            elif "_filtered" in data or navigation.get('current_list') == 'filtered':
                filter_name = navigation.get('filter_name', '—Ñ–∏–ª—å—Ç—Ä—É')
                navigation['current_page'] = page
                keyboard, total_pages = create_snippets_keyboard(results, page, "show", "_filtered")
                await update_or_send_message(
                    update,
                    context,
                    f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –ø–æ {filter_name} (—Å—Ç—Ä. {page+1}/{total_pages}):",
                    reply_markup=keyboard
                )
            elif action == "pending":
                navigation['current_page'] = page
                keyboard, total_pages = get_pending_snippets_keyboard(page)
                await update_or_send_message(
                    update,
                    context,
                    f"üñã –°–Ω–∏–ø–ø–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä. {page+1}/{total_pages}):",
                    reply_markup=keyboard
                )
            else:
                await show_all_snippets(update, context, page)
    elif data.startswith("review_"):
        snippet_id = data.replace("review_", "")
        await review_snippet(update, context, snippet_id)
    elif data.startswith("approve_"):
        await approve_snippet(update, context)
    elif data.startswith("reject_"):
        await reject_snippet(update, context)
    elif data == "cancel_reject":
        await update_or_send_message(update, context, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        context.user_data.pop('waiting_for_reject_reason', None)
        context.user_data.pop('reject_snippet_id', None)
    elif data == "back_to_pending":
        keyboard, total_pages = get_pending_snippets_keyboard(page=0)
        await update_or_send_message(update, context, f"üñã –°–Ω–∏–ø–ø–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä. 1/{total_pages}):", reply_markup=keyboard)
    elif data == "admin_pending":
        await pending_snippets(update, context)
    elif data == "admin_menu":
        await admin_menu(update, context)
    elif data == "back_to_admin":
        await update_or_send_message(
            update,
            context,
            "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
    elif data == "back_to_main":
        await update_or_send_message(
            update,
            context,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(is_admin)
        )
        context.user_data.pop('last_message_id', None)
    elif data == "admin_users":
        await list_users(update, context)
    elif data.startswith("page_users_"):
        page = int(data.replace("page_users_", ""))
        await list_users(update, context, page)
    elif data.startswith("view_user_"):
        user_id = data.replace("view_user_", "")
        await show_user_profile(update, context, user_id)
    elif data == "back_to_users":
        navigation = context.user_data.get('navigation', {})
        page = navigation.get('current_page', 0)
        await list_users(update, context, page)
    elif data == "noop":
        pass
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}", exc_info=True)
    if update and (update.message or update.callback_query):
        try:
            is_admin = admin_manager.is_admin(update.effective_user.id)
            await update_or_send_message(
                update,
                context,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard(is_admin)
            )
            context.user_data.clear()
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}", exc_info=True)

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("üì• –î–æ–±–∞–≤–∏—Ç—å"), add_snippet_start)],
            states={
                GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_snippet_name)],
                GET_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_snippet_language)],
                GET_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_snippet_tags)],
                GET_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_snippet_code)],
            },
            fallbacks=[MessageHandler(filters.Regex("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"), cancel)],
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_menu))
        application.add_handler(CommandHandler("addadmin", add_admin))
        application.add_handler(CommandHandler("pending", pending_snippets))
        application.add_handler(CommandHandler("search", search_snippets))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_error_handler(error_handler)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        loop = asyncio.get_event_loop()
        loop.run_until_complete(asyncio.gather(
            storage.initialize(),
            user_manager.initialize(),
            admin_manager.initialize()
        ))

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    import asyncio
    main()